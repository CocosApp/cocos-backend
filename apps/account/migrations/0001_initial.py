# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2018-01-18 19:15
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('discount', '0001_initial'),
        ('auth', '0008_alter_user_username_max_length'),
        ('restaurant', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo')),
                ('first_name', models.CharField(max_length=100, verbose_name='Nombres')),
                ('last_name', models.CharField(max_length=100, verbose_name='Apellidos')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='user', verbose_name='Foto personal')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Cumplea√±os')),
                ('is_invited', models.BooleanField(default=False)),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Habilitar Usuario')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('fav_card', models.ManyToManyField(blank=True, null=True, related_name='fav_cards', to='discount.Card', verbose_name='Tarjetas favoritas')),
            ],
            options={
                'verbose_name_plural': 'Usuarios',
                'verbose_name': 'Usuario',
            },
        ),
        migrations.CreateModel(
            name='UserRestaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_restaurants', to='restaurant.Restaurant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_restaurants', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Usuarios y sus restaurantes favoritos',
                'verbose_name': 'Usuario y su restaurante favorito',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='fav_restaurant',
            field=models.ManyToManyField(blank=True, null=True, related_name='restaurants', through='account.UserRestaurant', to='restaurant.Restaurant', verbose_name='Restaurantes favoritos'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='userrestaurant',
            unique_together=set([('user', 'restaurant')]),
        ),
    ]
